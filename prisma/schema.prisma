// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id        String   @id @default(uuid()) // Unique identifier for the product
  title     String // Product title
  rating    Float? // Optional rating, could be null if not provided
  price     Float // Product price
  discount  Float? // Optional discount
  desc      String // Product description
  images    String[] // Array of image URLs
  colors    String[] // Array of available colors
  category  String // Product category
  createdAt DateTime @default(now()) // Timestamp of product creation
  updatedAt DateTime @updatedAt // Automatically updates whenever the product is updated

  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  fullName  String?
  password  String
  image     String?
  gender    String?  @default("Others")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  carts     Cart?
  addresses Address?
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  firstName String
  lastName  String
  phone     String
  address   String
  city      String
  country   String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // Reference to User 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        Int    @id @default(autoincrement())
  cartId    Int // Reference to Cart
  productId String // Reference to Product
  quantity  Int

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int // Reference to User
  status    OrderStatus // Enum: PENDING, SHIPPED, DELIVERED, CANCELED
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   Int // Reference to Order
  productId String // Reference to Product
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}
